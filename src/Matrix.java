public class Matrix {
    public static Matrix Square_2x2() {
        return new Matrix(new int[][]{
            {0, 1},
            {2, 3}
        });
    }

    public static Matrix Square_3x3() {
        return new Matrix(new int[][] {
            {4, 0, 5},
            {1, 6, 2},
            {7, 3, 8}
        });
    }

    public static Matrix Square_6x6() {
        return new Matrix(new int[][] {
            {16, 26,  0,  2, 17, 27},
            {31, 21,  3,  1, 32, 22},
            { 4,  6, 18, 28,  8, 10},
            { 7,  5, 33, 23, 11,  9},
            {19, 29, 12, 14, 20, 30},
            {34, 24, 15, 13, 35, 25},
        });
    }

    public static Matrix VerticalLine_1x8() {
        return new Matrix(
            new int[][]{
                {0},
                {1},
                {2},
                {3},
                {4},
                {5},
                {6},
                {7}
            }
        );
    }

    public static Matrix HorizontalLine_8x1() {
        return new Matrix(new int[][]{
            {0, 1, 2, 3, 4, 5, 6, 7}
        });
    }

    public static Matrix DiagonalLine_8x8() {
        return new Matrix(new int[][]{
            {0, 1, 2, 3, 4, 5, 6, 7},
            {1, 2, 3, 4, 5, 6, 7, 0},
            {2, 3, 4, 5, 6, 7, 0, 1},
            {3, 4, 5, 6, 7, 0, 1, 2},
            {4, 5, 6, 7, 0, 1, 2, 3},
            {5, 6, 7, 0, 1, 2, 3, 4},
            {6, 7, 0, 1, 2, 3, 4, 5},
            {7, 0, 1, 2, 3, 4, 5, 6}
        });
    }

    public static Matrix KnightsTour_8x8() {
        return new Matrix(new int[][]{
            { 0, 47, 30, 49, 32, 15, 62, 18},
		    {29, 50, 45,  2, 61, 18, 13, 34},
		    {46,  1, 48, 31, 14, 33, 16, 63},
		    {51, 28,  3, 44, 19, 60, 35, 12},
		    { 4, 43, 24, 55,  8, 39, 20, 59},
		    {27, 52,  7, 40, 23, 56, 11, 36},
		    {42,  5, 54, 25, 38,  9, 58, 21},
		    {53, 26, 41,  6, 67, 22, 37, 10},
        });
    }

    public static Matrix KnightsTourRadial_8x8() {
        return new Matrix(new int[][]{
            {37, 40, 43, 60,  1, 56, 53, 58},
            {42, 61, 38, 49, 44, 59,  2, 55},
            {39, 36, 41,  0, 15, 54, 57, 52},
            {32, 19, 48, 45, 50, 31, 14,  3},
            {35, 46, 63, 18, 13, 16, 51, 30},
            {20, 25, 22, 47, 32,  9,  4,  7},
            {23, 34, 27, 12, 17,  6, 29, 10},
            {26, 21, 24, 33, 28, 11,  8,  5},
        });
    }

    public static Matrix ClusteredDiagonalDot_8x8() {
        return new Matrix(new int[][]{
            {24, 10, 12, 26, 35, 47, 49, 37},
		    { 8,  0,  2, 14, 45, 59, 61, 51},
		    {22,  6,  4, 16, 43, 57, 63, 53},
		    {30, 20, 18, 28, 33, 41, 55, 39},
		    {34, 46, 48, 36, 25, 11, 13, 27},
		    {44, 58, 60, 50,  9,  1,  3, 15},
		    {42, 56, 62, 52, 23,  7,  5, 17},
		    {32, 40, 54, 38, 31, 21, 19, 29},
        });
    }

    public static Matrix SmileyFace_19x19() {
        return new Matrix(new int[][]{
            {0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0},
		    {0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0},
            {0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0},
            {0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0},
            {0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0},
            {0, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 0},
            {3, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3},
            {3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3},
            {3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3},
            {3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3},
            {3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3},
            {0, 3, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 3, 0},
            {0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 3, 0},
            {0, 0, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 0, 0},
            {0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0},
            {0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0},
        });
    }

    public static Matrix SmileyFaceNoisy_19x19() {
        return new Matrix(new int[][]{
            {0, 2, 4, 6, 0, 2, 4, 5, 5, 5, 5, 5, 4, 2, 0, 6, 4, 2, 0},
            {4, 6, 0, 2, 4, 5, 5, 3, 3, 3, 3, 3, 5, 5, 4, 2, 0, 6, 4},
            {2, 0, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4, 2, 0, 2},
            {6, 4, 6, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 6, 4, 6},
            {0, 2, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 2, 0},
            {4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4},
            {2, 5, 3, 3, 3, 5, 5, 3, 3, 3, 3, 3, 5, 5, 3, 3, 3, 5, 2},
            {5, 3, 3, 3, 5, 5, 5, 5, 3, 3, 3, 5, 5, 5, 5, 3, 3, 3, 5},
            {5, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5},
            {5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5},
            {5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5},
            {5, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5},
            {2, 5, 3, 3, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 3, 3, 5, 2},
            {4, 5, 3, 3, 3, 5, 1, 1, 1, 1, 1, 1, 1, 5, 3, 3, 3, 5, 4},
            {0, 2, 5, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5, 2, 0},
            {6, 4, 6, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 6, 4, 6},
            {2, 0, 2, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4, 2, 0, 2},
            {4, 6, 0, 2, 4, 5, 5, 3, 3, 3, 3, 3, 5, 5, 4, 6, 0, 6, 4},
            {0, 2, 4, 6, 0, 2, 4, 5, 5, 5, 5, 5, 4, 2, 0, 2, 4, 2, 0},
        });
    }

    public static Matrix ManhattanDistanceFromCenter_19x19() {
        return new Matrix(new int[][]{
            {19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
		    {18, 17, 16, 15, 14, 13, 12, 11, 10,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
            {17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17},
            {16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16},
            {15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},
            {14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14},
            {13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13},
            {12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12},
            {11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11},
            {10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10},
            {11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11},
            {12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12},
            {13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13},
            {14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14},
            {15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},
            {16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16},
            {17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17},
            {18, 17, 16, 15, 14, 13, 12, 11, 10,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
            {19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
        });
    }

    private int[][] matrix;
    private int max;
    private Point tilingOffset;

    public Matrix(int[][] matrix) {
        this.matrix = matrix;
        calculateTilingOffset();
        setMax();
    }

    public Matrix(int[][] matrix, Point tilingOffset) {
        this.matrix = matrix;
        this.tilingOffset = tilingOffset;
        setMax();
    }

    public int[][] getMatrix() {
        return matrix;
    }

    public int getMax() {
        return max;
    }

    public Point getTilingOffset() {
        return tilingOffset;
    }

    private void setMax() {
        max = Integer.MIN_VALUE;
        for (int[] row : matrix) {
            for (int value : row) {
                max = Integer.max(max, value);
            }
        }
    }

    private void calculateTilingOffset() {
        int x = 0;
        int y = matrix.length;
        for (int[] row : matrix) {
            x = Integer.max(x, row.length);
        }
        tilingOffset = new Point(x, y);
    }
}
