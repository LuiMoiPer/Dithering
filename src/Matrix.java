public class Matrix {
    public static Matrix KnightsTour_8x8() {
        return new Matrix(new int[][]{
            { 0, 47, 30, 49, 32, 15, 62, 18},
		    {29, 50, 45,  2, 61, 18, 13, 34},
		    {46,  1, 48, 31, 14, 33, 16, 63},
		    {51, 28,  3, 44, 19, 60, 35, 12},
		    { 4, 43, 24, 55,  8, 39, 20, 59},
		    {27, 52,  7, 40, 23, 56, 11, 36},
		    {42,  5, 54, 25, 38,  9, 58, 21},
		    {53, 26, 41,  6, 67, 22, 37, 10},
        });
    }

    public static Matrix ClusteredDiagonalDot_8x8() {
        return new Matrix(new int[][]{
            {24, 10, 12, 26, 35, 47, 49, 37},
		    { 8,  0,  2, 14, 45, 59, 61, 51},
		    {22,  6,  4, 16, 43, 57, 63, 53},
		    {30, 20, 18, 28, 33, 41, 55, 39},
		    {34, 46, 48, 36, 25, 11, 13, 27},
		    {44, 58, 60, 50,  9,  1,  3, 15},
		    {42, 56, 62, 52, 23,  7,  5, 17},
		    {32, 40, 54, 38, 31, 21, 19, 29},
        });
    }

    public static Matrix SmileyFace_19x19() {
        return new Matrix(new int[][]{
            {0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0},
		    {0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0},
            {0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0},
            {0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0},
            {0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0},
            {0, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 0},
            {3, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3},
            {3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3},
            {3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3},
            {3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3},
            {3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3},
            {0, 3, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 3, 0},
            {0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 3, 0},
            {0, 0, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 0, 0},
            {0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0},
            {0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0},
        });
    }

    public static Matrix ManhattanDistanceFromCenter_19x19() {
        return new Matrix(new int[][]{
            {19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
		    {18, 17, 16, 15, 14, 13, 12, 11, 10,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
            {17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17},
            {16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16},
            {15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},
            {14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14},
            {13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13},
            {12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12},
            {11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11},
            {10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10},
            {11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11},
            {12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12},
            {13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13},
            {14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14},
            {15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},
            {16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16},
            {17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17},
            {18, 17, 16, 15, 14, 13, 12, 11, 10,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
            {19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
        });
    }

    private int[][] matrix;
    private int max;
    private Point tilingOffset;

    public Matrix(int[][] matrix) {
        this.matrix = matrix;
        calculateTilingOffset();
        setMax();
    }

    public Matrix(int[][] matrix, Point tilingOffset) {
        this.matrix = matrix;
        this.tilingOffset = tilingOffset;
        setMax();
    }

    public int[][] getMatrix() {
        return matrix;
    }

    public int getMax() {
        return max;
    }

    public Point getTilingOffset() {
        return tilingOffset;
    }

    private void setMax() {
        max = Integer.MIN_VALUE;
        for (int[] row : matrix) {
            for (int value : row) {
                max = Integer.max(max, value);
            }
        }
    }

    private void calculateTilingOffset() {
        int x = 0;
        int y = matrix.length;
        for (int[] row : matrix) {
            x = Integer.max(x, row.length);
        }
        tilingOffset = new Point(x, y);
    }
}
